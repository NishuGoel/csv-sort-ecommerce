"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _highland = _interopRequireDefault(require("highland"));

var _lodash = require("lodash");

var _csvParser = _interopRequireDefault(require("csv-parser"));

var _constants = _interopRequireDefault(require("../constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint class-methods-use-this:["error",{"exceptMethods":["_processData"]}] */
class AbstractParser {
  constructor(conf = {}, moduleName) {
    this.moduleName = moduleName;
    this.csvConfig = (0, _lodash.defaults)(conf.csvConfig || {}, {
      batchSize: _constants.default.standardOption.batchSize,
      delimiter: _constants.default.standardOption.delimiter,
      strictMode: _constants.default.standardOption.strictMode
    });
    this.logger = (0, _lodash.defaults)(conf.logger || {}, {
      error: () => {},
      warn: () => {},
      info: () => {},
      verbose: () => {}
    });
  }

  _streamInput(input, output) {
    let rowIndex = 1;
    return (0, _highland.default)(input).through((0, _csvParser.default)({
      separator: this.csvConfig.delimiter,
      strict: this.csvConfig.strictMode
    })).stopOnError(err => {
      this.logger.error(err);
      return output.emit('error', err);
    }).batch(this.csvConfig.batchSize).doto(data => {
      this.logger.verbose(`Parsed row-${rowIndex}: ${JSON.stringify(data)}`);
      rowIndex += 1;
    }).flatMap(_highland.default).flatMap(data => {
      var _ref, _data;

      return _ref = (_data = data, this._processData(_data)), (0, _highland.default)(_ref);
    }).stopOnError(err => {
      this.logger.error(err);
      return output.emit('error', err);
    }).doto(data => this.logger.verbose(`Converted row-${rowIndex}: ${JSON.stringify(data)}`));
  }

  _getMissingHeaders(data) {
    const headerDiff = (0, _lodash.difference)(_constants.default.requiredHeaders[this.moduleName], Object.keys(data));
    return headerDiff;
  }

  _processData() {
    throw new Error('Method AbstractParser._processData has to be overridden!');
  }

}

exports.default = AbstractParser;